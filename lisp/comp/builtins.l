;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; builtins.l
;;;   defines C function names for built-in lisp functions.
;;;   When the compiler compiles Lisp function call, it generates
;;;   code to call corresponding C functions if the lisp function 
;;;   symbol has 'comp::builtin-function-entry' property.
;;;
;;;	Copyright 1995, Toshihiro Matsui, Electrotechnical Laboratory
;;;
;;;   Original 1989 (?)
;;;	1996	some functions are added by Ishiwata.


(defun def-builtin-entry (sym lab &optional doc)
   (putprop sym lab 'builtin-function-entry)
   (setf (get sym :function-documentation) doc))

(def-builtin-entry 'LISP:= "NUMEQUAL" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:> "GREATERP" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:< "LESSP" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:>= "GREQP" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:<= "LSEQP" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:MOD "MOD" "(number divisor)")
(def-builtin-entry 'LISP:1- "SUB1" "(number)")
(def-builtin-entry 'LISP:1+ "ADD1" "(number)")
(def-builtin-entry 'LISP:+ "PLUS" "(&rest numbers)")
(def-builtin-entry 'LISP:- "MINUS" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:* "TIMES" "(&rest numbers)")
(def-builtin-entry 'LISP:/ "QUOTIENT" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:SIN "SIN" "(number)")
(def-builtin-entry 'LISP:COS "COS" "(number)")
(def-builtin-entry 'LISP:TAN "TAN" "(number)")
(def-builtin-entry 'LISP:ATAN "ATAN" "(y &optional (x nil xp))")
(def-builtin-entry 'LISP:SQRT "SQRT" "(number)")
(def-builtin-entry 'LISP:LOG "LOG" "(number &optional (base nil base-p))")
(def-builtin-entry 'LISP:EXP "EXP" "(number)")
(def-builtin-entry 'LISP:ABS "ABS" "(number)")
(def-builtin-entry 'LISP:ROUND "ROUND" "(number &optional (divisor 1))")
(def-builtin-entry 'LISP:FLOOR "FLOOR" "(number &optional (divisor 1))")
(def-builtin-entry 'LISP:CEILING "CEILING" "(number &optional (divisor 1))")
(def-builtin-entry 'LISP:TRUNCATE "TRUNCATE" "(number &optional (divisor 1))")
(def-builtin-entry 'LISP:FLOAT "EUSFLOAT" "(number &optional (other nil otherp))")
(def-builtin-entry 'LISP:DECODE-FLOAT "DECFLOAT" "(f)")
(def-builtin-entry 'LISP:MAX "MAX" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:MIN "MIN" "(number &rest more-numbers)")
(def-builtin-entry 'LISP:LOGAND "LOGAND" "(&rest integers)")
(def-builtin-entry 'LISP:LOGIOR "LOGIOR" "(&rest integers)")
(def-builtin-entry 'LISP:LOGXOR "LOGXOR" "(&rest integers)")
(def-builtin-entry 'LISP:LOGNOT "LOGNOT" "(number)")
(def-builtin-entry 'LISP:LOGTEST "LOGTEST" "(integer1 integer2)")
(def-builtin-entry 'LISP:LOGBITP "LOGBITP" "(index integer)")
(def-builtin-entry 'LISP:ASH "ASH" "(integer count)")
(def-builtin-entry 'LISP:LDB "LDB" "(bytespec integer)")
(def-builtin-entry 'LISP:DPB "DPB" "(newbyte bytespec integer)")
(def-builtin-entry 'LISP:MAKE-RANDOM-STATE "MAKE-RANDOM-STATE" "(&optional state)")
(def-builtin-entry 'LISP:RANDOM "RANDOM" "(arg &optional (state *random-state*))")
(def-builtin-entry 'LISP:AREF "AREF" "(array &rest subscripts)")
(def-builtin-entry 'LISP:ASET "ASET")
(def-builtin-entry 'LISP:VECTOR-POP "VECTORPOP" "(array)")
(def-builtin-entry 'LISP:VECTOR-PUSH "VECTORPUSH" "(new-element array)")
(def-builtin-entry 'LISP:VECTOR-PUSH-EXTEND "VECTOREXPUSH" "(new-element vector &optional min-extension)")
(def-builtin-entry 'LISP:ARRAYP "ARRAYP" "(object)")
(def-builtin-entry 'LISP:ALPHA-CHAR-P "ALPHAP" "(char)")
(def-builtin-entry 'LISP:UPPER-CASE-P "UPCASEP" "(char)")
(def-builtin-entry 'LISP:LOWER-CASE-P "LOWCASEP" "(char)")
(def-builtin-entry 'LISP:DIGIT-CHAR-P "DIGITP" "(char &optional (radix 10))")
(def-builtin-entry 'LISP:ALPHANUMERICP "ALNUMP" "(char)")
(def-builtin-entry 'LISP:CHAR-UPCASE "CHUPCASE" "(char)")
(def-builtin-entry 'LISP:CHAR-DOWNCASE "CHDOWNCASE" "(char)")

(def-builtin-entry 'LISP:COPY-OBJECT "COPYOBJ")
(def-builtin-entry 'LISP:CLASS "GETCLASS")
(def-builtin-entry 'LISP:SEND "SEND" "(object selector &rest args)")
(def-builtin-entry 'LISP:SEND-MSG "SEND")
(def-builtin-entry 'LISP:SEND-MESSAGE "SENDMESSAGE")
(def-builtin-entry 'LISP:INSTANTIATE "INSTANTIATE")
(def-builtin-entry 'LISP:CLASSP "CLASSP")
(def-builtin-entry 'LISP:SUBCLASSP "SUBCLASSP")
(def-builtin-entry 'LISP:DERIVEDP "DERIVEDP")
(def-builtin-entry 'LISP:SLOT "SLOT")
(def-builtin-entry 'LISP:SETSLOT "SETSLOT")
(def-builtin-entry 'LISP:CLONE "CLONE")
;;(def-builtin-entry 'SYSTEM::METHOD "FINDMETHOD")
(def-builtin-entry 'SYSTEM::METHOD-CACHE "METHCACHE")

; (def-builtin-entry 'LISP:OPEN "OPEN")	;rewritten in euslisp
(def-builtin-entry 'LISP:CLOSE "CLOSE" "(.arg0. &more .more-context. .more-count.)")
(def-builtin-entry 'LISP:READ "READ" "(&optional (stream *standard-input*) (eof-error-p t) (eof-value nil) (recursive-p nil))")
(def-builtin-entry 'LISP:READ-LINE "READLINE" "(&optional (stream *standard-input*) (eof-error-p t) eof-value recursive-p)")
(def-builtin-entry 'LISP:READ-CHAR "READCH" "(&optional (stream *standard-input*) (eof-error-p t) eof-value recursive-p)")
(def-builtin-entry 'LISP:UNREAD-CHAR "UNREADCH" "(character &optional (stream *standard-input*))")
(def-builtin-entry 'LISP:PEEK-CHAR "PEEKCH" "(&optional (peek-type nil) (stream *standard-input*) (eof-error-p t) eof-value recursive-p)")
(def-builtin-entry 'LISP:PRINT "PRINT" "(object &optional stream)")
(def-builtin-entry 'LISP:PRIN1 "PRIN1" "(object &optional stream)")
(def-builtin-entry 'LISP:PRINC "PRINC" "(object &optional stream)")
(def-builtin-entry 'LISP:TERPRI "TERPRI" "(&optional (stream *standard-output*))")
(def-builtin-entry 'LISP:PRINT-SIZE "PRNTSIZE")
(def-builtin-entry 'LISP:FINISH-OUTPUT "FINOUT" "(&optional (stream *standard-output*))")
(def-builtin-entry 'LISP:WRITE-BYTE "WRTBYTE" "(integer stream)")
(def-builtin-entry 'LISP:WRITE-WORD "WRTWORD")
(def-builtin-entry 'LISP:WRITE-LONG "WRTLONG")
(def-builtin-entry 'LISP:SET-MACRO-CHARACTER "SETMACROCH" "(char function &optional (non-terminatingp nil) (rt-designator *readtable*))")
(def-builtin-entry 'LISP:SET-DISPATCH-MACRO-CHARACTER "SETDISPMACRO" "(disp-char sub-char function &optional (rt-designator *readtable*))")
(def-builtin-entry 'LISP:GET-DISPATCH-MACRO-CHARACTER "GETDISPMACRO" "(disp-char sub-char &optional (rt-designator *readtable*))")
(def-builtin-entry 'LISP:FORMAT "XFORMAT" "(destination control-string &rest format-arguments)")
(def-builtin-entry 'SYSTEM::SAVE "SAVE")
(def-builtin-entry 'SYSTEM::BINLOAD "BINLOAD")
(def-builtin-entry 'LISP:V+ "VPLUS")
(def-builtin-entry 'LISP:V- "VMINUS")
(def-builtin-entry 'LISP:V. "VINNERPRODUCT")
(def-builtin-entry 'LISP:V* "VCROSSPRODUCT")
(def-builtin-entry 'LISP:V.* "SCA3PROD")
(def-builtin-entry 'LISP:V< "VLESSP")
(def-builtin-entry 'LISP:V> "VGREATERP")
(def-builtin-entry 'LISP:VMIN "VMIN")
(def-builtin-entry 'LISP:VMAX "VMAX")
(def-builtin-entry 'LISP:MINIMAL-BOX "MINIMALBOX")
(def-builtin-entry 'LISP:SCALE "SCALEVEC")
(def-builtin-entry 'LISP:NORM "VNORM")
(def-builtin-entry 'LISP:NORM2 "VNORM2")
(def-builtin-entry 'LISP:NORMALIZE-VECTOR "VNORMALIZE")
(def-builtin-entry 'LISP:DISTANCE "VDISTANCE")
(def-builtin-entry 'LISP:DISTANCE2 "VDISTANCE2")
;; (def-builtin-entry 'LISP:TRIANGLE "TRIANGLE") ;obsolete
(def-builtin-entry 'LISP:FLOATVECTOR "MKFLTVEC")
(def-builtin-entry 'LISP:FLOAT-VECTOR "MKFLTVEC")
(def-builtin-entry 'LISP:TRANSFORM "TRANSFORM")
(def-builtin-entry 'LISP:M* "MATTIMES")
(def-builtin-entry 'LISP:ROTATE-VECTOR "ROTVEC")
(def-builtin-entry 'LISP:ROTATE-MATRIX "ROTMAT")
(def-builtin-entry 'LISP:ROTATION-MATRIX "ROTATION_MATRIX")
(def-builtin-entry 'LISP:ROTATION-ANGLE "ROTANGLE")
(def-builtin-entry 'LISP:TRANSPOSE "TRANSPOSE")
(def-builtin-entry 'LISP:RPY-ANGLE "INV_RPY")
(def-builtin-entry 'LISP:EULER-ANGLE "INV_EULER")
(def-builtin-entry 'LISP:LU-DECOMPOSE "LU_DECOMPOSE")
(def-builtin-entry 'LISP:LU-SOLVE "LU_SOLVE")
(def-builtin-entry 'LISP:LU-DETERMINANT "LU_DETERMINANT")

(def-builtin-entry 'LISP:IDENTITY "IDENTITY" "(thing)")
(def-builtin-entry 'LISP:CAR "CAR" "(list)")
(def-builtin-entry 'LISP:CAR "FIRST" "(list)")
(def-builtin-entry 'LISP:CDR "CDR" "(list)")
(def-builtin-entry 'LISP:REST "CDR" "(list)")
(def-builtin-entry 'LISP:CADR "CADR" "(list)")
(def-builtin-entry 'LISP:CADR "SECOND" "(list)")
(def-builtin-entry 'LISP:CDDR "CDDR" "(list)")
(def-builtin-entry 'LISP:CDAR "CDAR" "(list)")
(def-builtin-entry 'LISP:CAAR "CAAR" "(list)")
(def-builtin-entry 'LISP:CADDR "CADDR" "(list)")
(def-builtin-entry 'LISP:CADDR "THIRD" "(list)")
(def-builtin-entry 'LISP:NTH "NTH" "(n list)")
(def-builtin-entry 'LISP:NTHCDR "NTHCDR" "(n list)")
(def-builtin-entry 'LISP:CONS "CONS" "(se1 se2)")
(def-builtin-entry 'LISP:RPLACA "RPLACA" "(cons x)")
(def-builtin-entry 'LISP:RPLACA2 "RPLACA2")
(def-builtin-entry 'LISP:RPLACD "RPLACD" "(cons x)")
(def-builtin-entry 'LISP:RPLACD2 "RPLACD2")
(def-builtin-entry 'LISP:ATOM "ATOM" "(object)")
(def-builtin-entry 'LISP:EQ "EQ" "(obj1 obj2)")
(def-builtin-entry 'LISP:EQL "EQ" "(x y)")
(def-builtin-entry 'LISP:NULL "NILP" "(object)")
(def-builtin-entry 'LISP:NOT "NILP" "(object)")
(def-builtin-entry 'LISP:LIST "LIST" "(&rest args)")
(def-builtin-entry 'LISP:LIST* "LIST_STAR" "(arg &rest others)")
(def-builtin-entry 'LISP:EQUAL "EQUAL" "(x y)")
(def-builtin-entry 'LISP:SUPEREQUAL "SUPEREQUAL")
(def-builtin-entry 'LISP:MEMQ "MEMQ")
(def-builtin-entry 'LISP:SUPERMEMBER "SUPERMEMBER")
(def-builtin-entry 'LISP:ASSQ "ASSQ")
(def-builtin-entry 'LISP:SUPERASSOC "SUPERASSOC")
(def-builtin-entry 'LISP:APPEND "APPEND" "(&rest lists)")
(def-builtin-entry 'LISP:NCONC "NCONC" "(&rest lists)")
(def-builtin-entry 'LISP:SUBST "SUBST" "(new old tree &key key (test #'eql testp) (test-not #'eql notp))")
(def-builtin-entry 'LISP:NSUBST "NSUBST" "(new old tree &key key (test #'eql testp) (test-not #'eql notp))")
(def-builtin-entry 'LISP:BUTLAST "BUTLAST" "(list &optional (n 1))")
(def-builtin-entry 'LISP:NBUTLAST "NBUTLAST" "(list &optional (n 1))")
(def-builtin-entry 'LISP:SUBSEQ "SUBSEQ" "(sequence start &optional end)")
(def-builtin-entry 'LISP:COPY-SEQ "COPYSEQ" "(sequence)")
(def-builtin-entry 'LISP:REVERSE "REVERSE" "(sequence)")
(def-builtin-entry 'LISP:NREVERSE "NREVERSE" "(sequence)")
(def-builtin-entry 'LISP:CONCATENATE "CONCATENATE" "(output-type-spec &rest sequences)")
(def-builtin-entry 'LISP:COERCE "COERCE" "(object output-type-spec)")
(def-builtin-entry 'LISP:MAP "MAP" "(result-type function first-sequence &rest more-sequences)")

(def-builtin-entry 'SYS::RAW-FILL "FILL")
(def-builtin-entry 'SYS::RAW-POSITION "POSITION")
(def-builtin-entry 'SYS::RAW-COUNT "COUNT")
(def-builtin-entry 'SYS::RAW-FIND "FIND")
(def-builtin-entry 'SYS::RAW-DELETE "DELETE")
(def-builtin-entry 'SYS::RAW-NSUBSTITUTE "NSUBSTITUTE")
(def-builtin-entry 'SYS::RAW-SUBSTITUTE "SUBSTITUTE")
(def-builtin-entry 'SYS::RAW-REMOVE-DUPLICATES "REMOVE_DUPLICATES")
(def-builtin-entry 'SYS::VECTOR-REPLACE "VECREPLACE")
(def-builtin-entry 'SYS::UNIVERSAL-REMOVE "UNIREMOVE")
(def-builtin-entry 'LISP:SORT "SORT" "(sequence predicate &rest args &key key)")
;;(def-builtin-entry 'LISP:MAKE-VECTOR "MAKEVECTOR")
(def-builtin-entry 'LISP:SVREF "SVREF" "(simple-vector index)")
(def-builtin-entry 'LISP:SVSET "SVSET")
(def-builtin-entry 'LISP:LENGTH "LENGTH" "(sequence)")
(def-builtin-entry 'LISP:ELT "ELT" "(sequence index)")
(def-builtin-entry 'LISP:SETELT "SETELT")
(def-builtin-entry 'LISP:CHAR "EUSCHAR" "(string index)")
(def-builtin-entry 'LISP:SETCHAR "SETCHAR")
(def-builtin-entry 'LISP:BIT "BIT" "(bit-array &rest subscripts)")
(def-builtin-entry 'LISP:SETBIT "SETBIT")
(def-builtin-entry 'LISP:VECTOR "MKVECTOR" "(&rest objects)")
(def-builtin-entry 'LISP:INTEGER-VECTOR "MKINTVECTOR")
(def-builtin-entry 'LISP:SYMBOLP "SYMBOLP" "(object)")
(def-builtin-entry 'LISP:STRINGP "STRINGP" "(object)")
(def-builtin-entry 'LISP:LISTP "LISTP" "(object)")
(def-builtin-entry 'LISP:CONSP "CONSP" "(object)")
(def-builtin-entry 'LISP:ENDP "ENDP" "(object)")
(def-builtin-entry 'LISP:NUMBERP "NUMBERP" "(object)")
(def-builtin-entry 'LISP:INTEGERP "INTEGERP" "(object)")
(def-builtin-entry 'LISP:FLOATP "FLOATP" "(object)")
(def-builtin-entry 'LISP:VECTORP "VECTORP" "(object)")
(def-builtin-entry 'LISP:BOUNDP "BOUNDP" "(symbol)")
(def-builtin-entry 'LISP:FBOUNDP "FBOUNDP" "(name)")
(def-builtin-entry 'LISP:STREAMP "STREAMP" "(stream)")
(def-builtin-entry 'LISP:STRING< "STR_LT" "(string1 string2 &key (start1 0) end1 (start2 0) end2)")
(def-builtin-entry 'LISP:STRING<= "STR_LE" "(string1 string2 &key (start1 0) end1 (start2 0) end2)")
;; (def-builtin-entry 'STRING= "STR_EQ")
(def-builtin-entry 'LISP:STRING> "STR_GT" "(string1 string2 &key (start1 0) end1 (start2 0) end2)")
(def-builtin-entry 'LISP:STRING>= "STR_GE" "(string1 string2 &key (start1 0) end1 (start2 0) end2)")
(def-builtin-entry 'LISP:EVAL "EVAL" "(original-exp)")
(def-builtin-entry 'LISP:APPLY "APPLY" "(function arg &rest arguments)")
(def-builtin-entry 'LISP:FUNCALL "FUNCALL" "(function &rest arguments)")
(def-builtin-entry 'LISP:PROG1 "PROG1" "(&rest args)")
(def-builtin-entry 'LISP:MAPC "MAPC" "(function list &rest more-lists)")
(def-builtin-entry 'LISP:MAPCAR "MAPCAR" "(function list &rest more-lists)")
(def-builtin-entry 'LISP:MAPCAN "MAPCAN" "(function list &rest more-lists)")
(def-builtin-entry 'LISP:ERROR "SIGERROR" "(datum &rest arguments)")
(def-builtin-entry 'LISP:RESET "RESET" "nil")
(def-builtin-entry 'LISP:EVALHOOK "EVALHOOK")
(def-builtin-entry 'LISP:MACROEXPAND2 "MACEXPAND2")
(def-builtin-entry 'LISP:PROCLAIM "PROCLAIM" "(raw-form)")
(def-builtin-entry 'LISP::SETFUNC "SETFUNC")
(def-builtin-entry 'LISP:SYMBOL-VALUE "SYMVALUE" "(symbol)")
(def-builtin-entry 'LISP::SYMBOL-BOUND-VALUE "SYMBNDVALUE")
(def-builtin-entry 'LISP:SYMBOL-FUNCTION "SYMFUNC" "(symbol)")
(def-builtin-entry 'LISP:MAKUNBOUND "MAKUNBOUND" "(symbol)")
(def-builtin-entry 'LISP:SET "SETSPECIAL" "(symbol new-value)")
(def-builtin-entry 'LISP:FIND-SYMBOL "FINDSYMBOL" "(name &optional (package (sane-package)))")
(def-builtin-entry 'LISP:INTERN "INTERN" "(name &optional (package (sane-package)))")
(def-builtin-entry 'LISP:GENSYM "GENSYM" "(&optional (thing \"G\"))")
(def-builtin-entry 'LISP:LIST-ALL-PACKAGES "ALLPACKAGES" "nil")
(def-builtin-entry 'LISP:FIND-PACKAGE "FINDPACKAGE" "(package-designator)")
(def-builtin-entry 'SYSTEM::MAKEPACKAGE "MAKEPACKAGE")
(def-builtin-entry 'LISP:SXHASH "SXHASH" "(x)")
(def-builtin-entry 'LISP:GET "GETPROP" "(symbol indicator &optional (default nil))")
(def-builtin-entry 'LISP:EXPORT "EXPORT" "(symbols &optional (package (sane-package)))")
(def-builtin-entry 'LISP:PUTPROP "PUTPROP")

(def-builtin-entry 'UNIX:KILL "KILL")
(def-builtin-entry 'UNIX:SIGNAL "SIGNAL")
(def-builtin-entry 'UNIX::EXIT "EXIT")
(def-builtin-entry 'UNIX:GETPID "GETPID")
(def-builtin-entry 'UNIX:UREAD "UNIXREAD")
(def-builtin-entry 'UNIX:WRITE "UNIXWRITE")
(def-builtin-entry 'UNIX:UCLOSE "UNIXCLOSE")
(def-builtin-entry 'UNIX:IOCTL "IOCTL")
(def-builtin-entry 'UNIX:LSEEK "LSEEK")
(def-builtin-entry 'UNIX::SBRK "SBRK")
(def-builtin-entry 'UNIX:MALLOC "MALLOC")
(def-builtin-entry 'UNIX:FREE "FREE")
(def-builtin-entry 'UNIX:SOCKET "SOCKET")
(def-builtin-entry 'UNIX:BIND "BIND")
(def-builtin-entry 'UNIX:CONNECT "CONNECT")
(def-builtin-entry 'UNIX:LISTEN "LISTEN")
(def-builtin-entry 'UNIX:ACCEPT "ACCEPT")
(def-builtin-entry 'UNIX:SENDTO "SENDTO")
(def-builtin-entry 'UNIX:RECVFROM "RECVFROM")
#-:solaris2
(def-builtin-entry 'UNIX:GETPEERNAME "GETPEERNAME")
(def-builtin-entry 'UNIX:PTIMES "PTIMES")
(def-builtin-entry 'UNIX:RUNTIME "RUNTIME")
(def-builtin-entry 'UNIX:LOCALTIME "LOCALTIME")
(def-builtin-entry 'UNIX:ASCTIME "ASCTIME")
(def-builtin-entry 'UNIX:GETITIMER "GETITIMER")
(def-builtin-entry 'UNIX:SETITIMER "SETITIMER")
#-:solaris2
(progn (def-builtin-entry 'UNIX:GETRUSAGE "GETRUSAGE")
       (def-builtin-entry 'UNIX:GETPAGESIZE "GETPAGESIZE"))
(def-builtin-entry 'UNIX::GETTIMEOFDAY "GETTIMEOFDAY")
(def-builtin-entry 'UNIX:ALARM "ALARM")
(def-builtin-entry 'UNIX:WAIT "WAIT")
(def-builtin-entry 'UNIX:FORK "FORK")
(def-builtin-entry 'UNIX:GETPPID "GETPPID")
(def-builtin-entry 'UNIX:GETPGRP "GETPGRP")
(def-builtin-entry 'UNIX:SETPGRP "SETPGRP")
(def-builtin-entry 'UNIX:GETUID "GETUID")
(def-builtin-entry 'UNIX:GETEUID "GETEUID")
(def-builtin-entry 'UNIX:GETGID "GETGID")
(def-builtin-entry 'UNIX:GETEGID "GETEGID")
(def-builtin-entry 'UNIX:SETUID "SETUID")
(def-builtin-entry 'UNIX:SETGID "SETGID")
(def-builtin-entry 'UNIX:MKNOD "MKNOD")
(def-builtin-entry 'UNIX:FCNTL "FCNTL")
#-:solaris2
(progn (def-builtin-entry 'UNIX:IOCTL_ "IOCTL_")
       (def-builtin-entry 'UNIX:IOCTL_R "IOCTL_R")
       (def-builtin-entry 'UNIX:IOCTL_W "IOCTL_W")
       (def-builtin-entry 'UNIX:IOCTL_WR "IOCTL_WR"))
(def-builtin-entry 'UNIX:DUP "DUP")
(def-builtin-entry 'UNIX:DUP2 "DUP2")
(def-builtin-entry 'UNIX:SYSTEM "SYSTEM")
(def-builtin-entry 'UNIX:GETWD "GETWD")
(def-builtin-entry 'UNIX:GETENV "GETENV")
(def-builtin-entry 'UNIX:SLEEP "SLEEP")
(def-builtin-entry 'UNIX:SYSERRLIST "SYSERRLIST")
(def-builtin-entry 'UNIX:PAUSE "PAUSE")
(def-builtin-entry 'UNIX:ISATTY "ISATTY")
(def-builtin-entry 'UNIX:LINK "LINK")
(def-builtin-entry 'UNIX:UNLINK "UNLINK")
(def-builtin-entry 'UNIX:RENAME "RENAME")
(def-builtin-entry 'UNIX:ACCESS "ACCESS")
;(def-builtin-entry 'UNIX:FLOCK "FLOCK")
(def-builtin-entry 'UNIX:STAT "STAT")
(def-builtin-entry 'UNIX:CHDIR "CHDIR")
(def-builtin-entry 'UNIX:CHMOD "CHMOD")
(def-builtin-entry 'UNIX:CHOWN "CHOWN")
(def-builtin-entry 'UNIX:PIPE "PIPE")
(def-builtin-entry 'UNIX:SELECT "SELECT")
(def-builtin-entry 'UNIX:SELECT-READ-FD "SELECT_READ")
(def-builtin-entry 'UNIX::READDIR "DIRECTORY")
(def-builtin-entry 'UNIX:GETHOSTNAME "GETHOSTNAME")
(def-builtin-entry 'UNIX:GETHOSTBYNAME "GETHOSTBYNAME")
(def-builtin-entry 'UNIX:GETHOSTBYADDR "GETHOSTBYADDR")
(def-builtin-entry 'UNIX:GETNETBYNAME "GETNETBYNAME")
(def-builtin-entry 'UNIX:GETPROTOBYNAME "GETPROTOBYNAME")
(def-builtin-entry 'UNIX:GETSERVBYNAME "GETSERVBYNAME")
#-(or :irix :irix6)
(def-builtin-entry 'UNIX:VFORK "VFORK")
(def-builtin-entry 'UNIX:EXEC "EXEC")
#-:solaris2
(progn (def-builtin-entry 'UNIX:GETPRIORITY "GETPRIORITY")
       (def-builtin-entry 'UNIX:SETPRIORITY "SETPRIORITY"))
(def-builtin-entry 'UNIX:PUTENV "PUTENV")
#-news
(progn (def-builtin-entry 'UNIX:MSGGET "MSGGET")
       (def-builtin-entry 'UNIX:MSGSND "MSGSND")
       (def-builtin-entry 'UNIX:MSGRCV "MSGRCV")
       (def-builtin-entry 'UNIX:MSGCTL "MSGCTL"))
(def-builtin-entry 'UNIX:UNAME "UNAME")

(def-builtin-entry 'SYS::SBCOUNT "SBCOUNT")
(def-builtin-entry 'SYS:GC "GEESEE")
(def-builtin-entry 'SYS:GCTIME "GCTIME")
(def-builtin-entry 'SYS:ALLOC "ALLOC")
(def-builtin-entry 'SYS:NEWSTACK "NEWSTACK")
(def-builtin-entry 'SYS:RECLAIM "RECLAIM")
(def-builtin-entry 'SYS:RECLAIM-TREE "RECLTREE")
(def-builtin-entry 'SYS:OBJECT-SIZE "OBJSIZE")
(def-builtin-entry 'SYS::BKTRACE "BKTRACE")
(def-builtin-entry 'SYS:MEMORY-REPORT "MEMORY_REPORT")
(def-builtin-entry 'SYS:CLEAR-MEMORY-REPORT "CLEAR_ALLOCCOUNT")
(def-builtin-entry 'SYS:ROOM "ROOM")
(def-builtin-entry 'SYS::FREE-COUNT "FREE_COUNTS")
(def-builtin-entry 'SYS:LIST-ALL-CHUNKS "LIST_ALL_CHUNKS")
(def-builtin-entry 'SYS:LIST-ALL-INSTANCES "INSTANCELIST")
(def-builtin-entry 'SYS:ADDRESS "ADDRESS")
(def-builtin-entry 'SYS:PEEK "PEEK")
(def-builtin-entry 'SYS:POKE "POKE")
;(def-builtin-entry 'SYS::MALLOC_DEBUG "MALLOC_DEBUG")
;(def-builtin-entry 'SYS::MALLOC_VERIFY "MALLOC_VERIFY")
(def-builtin-entry 'SYS:LIST-ALL-REFERENCES "LISTALLREFERENCES")
(def-builtin-entry 'SYS:LIST-ALL-CATCHERS "LISTALLCATCHERS")
(def-builtin-entry 'SYS:LIST-ALL-BINDINGS "LISTBINDINGS")
(def-builtin-entry 'SYS:LIST-ALL-SPECIAL-BINDINGS "LISTSPECIALBINDINGS")
(def-builtin-entry 'SYS:LIST-ALL-CLASSES "LISTALLCLASSES")
(def-builtin-entry 'SYS::EXPORT-ALL-SYMBOLS "EXPORTALL")
(def-builtin-entry 'SYS::NEXT-SPECIAL-INDEX "NEXT_SPECIAL_INDEX")
(def-builtin-entry 'SYS::THREAD-SPECIALS "THREAD_SPECIALS")
(def-builtin-entry 'SYS::DISPOSE-HOOK "DISPOSE_HOOK")

#+:thread
(progn
  (def-builtin-entry 'UNIX:THR-SELF "THR_SELF")
  (def-builtin-entry 'UNIX:THR-GETPRIO "THR_GETPRIO")
  (def-builtin-entry 'UNIX:THR-SETPRIO "THR_SETPRIO")
  (def-builtin-entry 'UNIX:THR-GETCONCURRENCY "THR_GETCONCURRENCY")
  (def-builtin-entry 'UNIX:THR-SETCONCURRENCY "THR_SETCONCURRENCY")
  (def-builtin-entry 'UNIX:THR-CREATE "THR_CREATE")
  (def-builtin-entry 'UNIX:THR-KILL "THR_KILL")
  (def-builtin-entry 'UNIX:THR-SUSPEND "THR_SUSPEND")
  (def-builtin-entry 'UNIX:THR-CONTINUE "THR_CONTINUE"))
#+(and :thread :solaris2)
(def-builtin-entry 'UNIX:THR-SIGSETMASK "THR_SIGSETMASK")

#+:thread
(progn
  (def-builtin-entry 'SYS:THREAD-SELF "THREAD_SELF")
  (def-builtin-entry 'SYS:MAKE-THREAD "MAKE_THREAD")
  (def-builtin-entry 'SYS:THREAD "AFUNCALL")
  (def-builtin-entry 'SYS:THREAD-NO-WAIT "AFUNCALL_NO_WAIT")
  (def-builtin-entry 'SYS:WAIT-THREAD "WAIT_AFUNCALL")
  (def-builtin-entry 'SYS::FREE-THREADS "FREE_THREADS")
  (def-builtin-entry 'SYS:MAKE-MUTEX-LOCK "MAKE_MUTEX_LOCK")
  (def-builtin-entry 'SYS:MUTEX-LOCK "MUTEX_LOCK")
  (def-builtin-entry 'SYS:MUTEX-TRYLOCK "MUTEX_TRYLOCK")
  (def-builtin-entry 'SYS:MUTEX-UNLOCK "MUTEX_UNLOCK")
  (def-builtin-entry 'SYS:MAKE-COND "MAKE_COND")
  (def-builtin-entry 'SYS:COND-WAIT "COND_WAIT")
  (def-builtin-entry 'SYS:COND-SIGNAL "COND_SIGNAL")
  (def-builtin-entry 'SYS:MAKE-SEMAPHORE "MAKE_SEMAPHORE")
  (def-builtin-entry 'SYS:SEMA-POST "SEMA_POST")
  (def-builtin-entry 'SYS:SEMA-WAIT "SEMA_WAIT"))
#+(and :thread (or :Solaris2 :alpha))
(def-builtin-entry 'SYS::SEMA-TRYWAIT "SEMA_TRYWAIT")

(provide :builtins "@(#)$Id: builtins.l,v 1.1.1.1 2003/11/20 07:46:27 eus Exp $")
